---
swagger: "2.0"
info:
  x-ibm-name: "lanzamientos"
  title: "Lanzamientos"
  version: "1.0.0"
schemes:
- "https"
host: "$(catalog.host)"
basePath: "/lanzamientos"
consumes:
- "application/json"
produces:
- "application/json"
securityDefinitions:
  clientIdHeader:
    type: "apiKey"
    in: "header"
    name: "X-IBM-Client-Id"
security:
- clientIdHeader: []
x-ibm-configuration:
  testable: true
  enforced: true
  cors:
    enabled: true
  assembly:
    execute:
    - invoke:
        title: "Obtener lanzamientos"
        timeout: 60
        verb: "GET"
        cache-response: "protocol"
        cache-ttl: 900
        stop-on-error:
        - null
        version: "1.0.0"
        target-url: "https://api.eu-gb.apiconnect.appdomain.cloud/gjlpbgmsizabnuuhxrawdrtcom-dev/sb/curso/launches"
        secure-gateway: false
    - gatewayscript:
        title: "Procesar"
        version: "1.0.0"
        source: "let serviceResponse = apim.getvariable('message.body');\n\nlet response\
          \ = [];\n\nserviceResponse.launches.forEach(l => {\n   let launch = {\n\
          \     id: l.id,\n     nombre: l.name,\n     ventana: l.windowstart\n   };\n\
          \   \n   switch (l.status) {\n       case 1:\n           launch.estado =\
          \ \"ok\";\n           break;\n       case 2:\n           launch.estado =\
          \ \"ko\";\n           break;\n       case 3:\n           launch.estado =\
          \ \"realizado\";\n           break;\n       case 4:\n           launch.estado\
          \ = \"fallido\";\n           break;\n   }\n   \n   response.push(launch);\n\
          });\n\napim.setvariable('message.body', response);\napim.output('application/json');\n"
    catch: []
  phase: "realized"
paths:
  /:
    get:
      responses:
        200:
          description: "200 OK"
      operationId: "ObtenerLanzamientos"
definitions: {}
tags: []
